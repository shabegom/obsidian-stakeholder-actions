/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugin's github repository at
https://github.com/zsviczian/obsidian-stakeholder-actions
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const VIEW_TYPE_TODO = 'online.zsviczian.obsidian-stakeholder_action-plugin';

var TodoItemStatus;
(function (TodoItemStatus) {
    TodoItemStatus[TodoItemStatus["Todo"] = 0] = "Todo";
    TodoItemStatus[TodoItemStatus["Done"] = 1] = "Done";
})(TodoItemStatus || (TodoItemStatus = {}));
// eslint-disable-next-line @typescript-eslint/no-namespace
(function (TodoItemStatus) {
    function toggleStatus(status) {
        switch (status) {
            case TodoItemStatus.Todo:
                return TodoItemStatus.Done;
            case TodoItemStatus.Done:
                return TodoItemStatus.Todo;
        }
    }
    TodoItemStatus.toggleStatus = toggleStatus;
})(TodoItemStatus || (TodoItemStatus = {}));
class TodoItem {
    constructor(status, description, person, project, isSomedayMaybeNote, isDiscussWithNote, isWaitingForNote, isPromisedToNote, sourceFilePath, startIndex, length, actionDate) {
        this.status = status;
        this.description = description;
        this.person = person;
        this.project = project;
        this.actionDate = actionDate;
        this.isSomedayMaybeNote = isSomedayMaybeNote;
        this.isDiscussWithNote = isDiscussWithNote;
        this.isWaitingForNote = isWaitingForNote;
        this.isPromisedToNote = isPromisedToNote;
        this.sourceFilePath = sourceFilePath;
        this.startIndex = startIndex;
        this.length = length;
    }
}

class TodoParser {
    constructor(props) {
        this.props = props;
    }
    parseTasks(filePath, fileContents) {
        return __awaiter(this, void 0, void 0, function* () {
            const pattern = /(-|\*) \[(\s|x)?\]\s(.*)/g;
            return [...fileContents.matchAll(pattern)].map(task => this.parseTask(filePath, task));
        });
    }
    parseTask(filePath, entry) {
        var _a;
        // debugger;
        const todoItemOffset = 2; // Strip off `-|* `
        const status = entry[2] === 'x' ? TodoItemStatus.Done : TodoItemStatus.Todo;
        const description = entry[3];
        const dateMatches = description.match(this.props.dateRegexp);
        let actionDate = undefined;
        if (dateMatches != null) {
            actionDate =
                dateMatches.length > 3
                    ? new Date(parseInt(dateMatches[1]), parseInt(dateMatches[2]) - 1, parseInt(dateMatches[3]), 0, 0, 0, 0)
                    : undefined;
        }
        const personMatches = description.match(this.props.personRegexp);
        const person = personMatches != null ? personMatches[1] : '';
        const projectMatches = description.match(this.props.projectRegexp);
        const project = projectMatches != null ? projectMatches[1] : '';
        return new TodoItem(status, description, person, project, description.match(this.props.somedayMaybeRegexp) != null, description.match(this.props.discussWithRegexp) != null, description.match(this.props.waitingForRegexp) != null, description.match(this.props.promisedToRegexp) != null, filePath, ((_a = entry.index) !== null && _a !== void 0 ? _a : 0) + todoItemOffset, entry[0].length - todoItemOffset, actionDate);
    }
}

class TodoIndex {
    constructor(vault, listener, props) {
        this.props = props;
        this.vault = vault;
        this.todos = new Map();
        this.listeners = [listener];
    }
    reloadIndex(props) {
        return __awaiter(this, void 0, void 0, function* () {
            this.props = props;
            yield this.initialize();
        });
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: persist index & last sync timestamp; only parse files that changed since then.
            const todoMap = new Map();
            let numberOfTodos = 0;
            const timeStart = new Date().getTime();
            const markdownFiles = this.vault.getMarkdownFiles();
            for (const file of markdownFiles) {
                const todos = yield this.parseTodosInFile(file);
                numberOfTodos += todos.length;
                if (todos.length > 0) {
                    todoMap.set(file.path, todos);
                }
            }
            const totalTimeMs = new Date().getTime() - timeStart;
            console.log(`[obsidian-stakeholder_action-plugin] Parsed ${numberOfTodos} TODOs from ${markdownFiles.length} markdown files in (${totalTimeMs / 1000.0}s)`);
            this.todos = todoMap;
            this.registerEventHandlers();
            this.invokeListeners();
        });
    }
    setStatus(todo, newStatus) {
        const file = this.vault.getAbstractFileByPath(todo.sourceFilePath);
        const fileContents = this.vault.read(file);
        fileContents.then((c) => {
            const newTodo = `[${newStatus === TodoItemStatus.Done ? 'x' : ' '}] ${todo.description}`;
            const newContents = c.substring(0, todo.startIndex) +
                newTodo +
                c.substring(todo.startIndex + todo.length);
            this.vault.modify(file, newContents);
        });
    }
    indexAbstractFile(file) {
        if (!(file instanceof obsidian.TFile)) {
            return;
        }
        this.indexFile(file);
    }
    indexFile(file) {
        this.parseTodosInFile(file).then(todos => {
            this.todos.set(file.path, todos);
            this.invokeListeners();
        });
    }
    clearIndex(path, silent = false) {
        this.todos.delete(path);
        if (!silent) {
            this.invokeListeners();
        }
    }
    setProps(setter) {
        this.props = setter(this.props);
        //do I need to do anything else??
    }
    parseTodosInFile(file) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: Does it make sense to index completed TODOs at all?
            const todoParser = new TodoParser(this.props);
            const fileContents = yield this.vault.cachedRead(file);
            return todoParser
                .parseTasks(file.path, fileContents)
                .then(todos => todos.filter(todo => todo.status === TodoItemStatus.Todo));
        });
    }
    registerEventHandlers() {
        this.vault.on('create', (file) => {
            this.indexAbstractFile(file);
        });
        this.vault.on('modify', (file) => {
            this.indexAbstractFile(file);
        });
        this.vault.on('delete', (file) => {
            this.clearIndex(file.path);
        });
        // We could simply change the references to the old path, but parsing again does the trick as well
        this.vault.on('rename', (file, oldPath) => {
            this.clearIndex(oldPath);
            this.indexAbstractFile(file);
        });
    }
    invokeListeners() {
        const todos = [].concat(...Array.from(this.todos.values()));
        this.listeners.forEach(listener => listener(todos));
    }
}

const DEFAULT_SETTINGS = {
    personRegexpString: '\\[{2}People\\/(.*?)\\]{2}',
    projectRegexpString: '\\[{2}Projects\\/(.*?)\\]{2}',
    dateRegexpString: '#(\\d{4})\\/(\\d{2})\\/(\\d{2})',
    discussWithRegexpString: '#(discussWith)',
    waitingForRegexpString: '#(waitingFor)',
    promisedToRegexpString: '#(promisedTo)',
    somedayMaybeRegexpString: '#(someday)',
};
class ActionTrackerSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        this.containerEl.empty();
        this.containerEl.createEl('h2', {
            text: 'Settings for the stakeholder action tracker plugin',
        });
        new obsidian.Setting(containerEl)
            .setName('Person regexp pattern')
            .setDesc('This is the regular expression to identify the action party in the action. Used for filtering todos by person.')
            .addText(text => text
            .setPlaceholder('\\[{2}People\\/(.*?)\\]{2}')
            .setValue(this.plugin.settings.personRegexpString)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.personRegexpString = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Project regexp pattern')
            .setDesc('This is the regular expression to identify the project in the action. Used for filtering todos by project name.')
            .addText(text => text
            .setPlaceholder('\\[{2}Projects\\/(.*?)\\]{2}')
            .setValue(this.plugin.settings.projectRegexpString)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.projectRegexpString = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Date regexp pattern')
            .setDesc('This is the regular expression to get the date for an action. The RegExp needs to capture 3 values. The first one should be the year (yyyy), the sceond the month (mm), the third the day (dd).')
            .addText(text => text
            .setPlaceholder('#(\\d{4})\\/(\\d{2})\\/(\\d{2})')
            .setValue(this.plugin.settings.dateRegexpString)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.dateRegexpString = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Discuss With regexp pattern')
            .setDesc('This is the regexp pattern you use to mark topics you want to discuss with someone. "Discuss with", "Promised to", and "Waiting for" actions show up under the Stakeholder Actions tab.')
            .addText(text => text
            .setPlaceholder('#(discussWith)')
            .setValue(this.plugin.settings.discussWithRegexpString)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.discussWithRegexpString = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Waiting For regexp pattern')
            .setDesc('This is the regexp pattern you use to mark topics someone has promised to deliver to me. "Discuss with", "Promised to", and "Waiting for" actions show up under the Stakeholder Actions tab.')
            .addText(text => text
            .setPlaceholder('#(waitingFor)')
            .setValue(this.plugin.settings.waitingForRegexpString)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.waitingForRegexpString = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Promised To regexp pattern')
            .setDesc('This is the regexp pattern you use to mark topics someone has promised to deliver to me. "Discuss with", "Promised to", and "Waiting for" actions show up under the Stakeholder Actions tab.')
            .addText(text => text
            .setPlaceholder('#(promisedTo)')
            .setValue(this.plugin.settings.promisedToRegexpString)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.promisedToRegexpString = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Someday Maybe regexp pattern')
            .setDesc('This is the regexp pattern you use to mark actions deliberately without a deadline - i.e. bucket list. Actions without a valid tag and without a deadline will show up in the Inbox.')
            .addText(text => text
            .setPlaceholder('#(someday)')
            .setValue(this.plugin.settings.somedayMaybeRegexpString)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.somedayMaybeRegexpString = value;
            yield this.plugin.saveSettings();
        })));
    }
}

var Icon;
(function (Icon) {
    Icon[Icon["Inbox"] = 0] = "Inbox";
    Icon[Icon["Reveal"] = 1] = "Reveal";
    Icon[Icon["Scheduled"] = 2] = "Scheduled";
    Icon[Icon["Someday"] = 3] = "Someday";
    Icon[Icon["Today"] = 4] = "Today";
    Icon[Icon["Stakeholder"] = 5] = "Stakeholder";
    Icon[Icon["Aging"] = 6] = "Aging";
})(Icon || (Icon = {}));
const RenderIcon = (icon, title = '', description = '') => {
    const svg = svgForIcon(icon)(title, description);
    return parser.parseFromString(svg, 'text/xml').documentElement;
};
const parser = new DOMParser();
const svgForIcon = (icon) => {
    switch (icon) {
        case Icon.Inbox:
            return inboxIcon;
        case Icon.Reveal:
            return revealIcon;
        case Icon.Scheduled:
            return scheduledIcon;
        case Icon.Someday:
            return somedayIcon;
        case Icon.Today:
            return todayIcon;
        case Icon.Stakeholder:
            return stakeholderIcon;
        case Icon.Aging:
            return agingIcon;
    }
};
const inboxIcon = (title, description) => `
<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24" aria-label="${title + description}">
  <title>${title}</title>
  <description>${description}</description>
  <path d="M0 0h24v24H0V0z" fill="none"/>
  <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5v-3h3.56c.69 1.19 1.97 2 3.45 2s2.75-.81 3.45-2H19v3zm0-5h-4.99c0 1.1-.9 2-2 2s-2-.9-2-2H5V5h14v9z"/>
</svg>
`;
const revealIcon = (title, description) => `
<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="24" viewBox="0 0 24 24" width="24" role="img" aria-label="${title + description}">
  <title>${title}</title>
  <description>${description}</description>
  <rect fill="none" height="24" width="24"/><path d="M9,5v2h6.59L4,18.59L5.41,20L17,8.41V15h2V5H9z"/>
</svg>
`;
const scheduledIcon = (title, description) => `
<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24" aria-label="${title + description}">
  <title>${title}</title>
  <description>${description}</description>
  <path d="M0 0h24v24H0V0z" fill="none"/>
  <path d="M20 3h-1V1h-2v2H7V1H5v2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 18H4V10h16v11zm0-13H4V5h16v3z"/>
</svg>
`;
const somedayIcon = (title, description) => `
<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="24" viewBox="0 0 24 24" width="24" aria-label="${title + description}">
  <title>${title}</title>
  <description>${description}</description>
  <g><rect fill="none" height="24" width="24"/></g>
  <g><g><path d="M20,2H4C3,2,2,2.9,2,4v3.01C2,7.73,2.43,8.35,3,8.7V20c0,1.1,1.1,2,2,2h14c0.9,0,2-0.9,2-2V8.7c0.57-0.35,1-0.97,1-1.69V4 C22,2.9,21,2,20,2z M19,20H5V9h14V20z M20,7H4V4h16V7z"/><rect height="2" width="6" x="9" y="12"/></g></g>
</svg>
`;
const todayIcon = (title, description) => `
<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24" aria-label="${title + description}">
  <title>${title}</title>
  <description>${description}</description>
  <path d="M0 0h24v24H0V0z" fill="none"/>
  <path d="M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"/>
</svg>
`;
const stakeholderIcon = (title, description) => `
<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 16 24" width="16" height="24" viewBox="0 0 16 24" aria-label="${title + description}">
  <title>${title}</title>
  <description>${description}</description>
  <path d="M0 0h24v16H0V0z" fill="none"/>
  <path  d="M 12.041617 0.379395 C 14.783072 -0.385254 17.844596 0.648438 20.335563 2.021973 C 22.826529 3.395508 25.707145 5.746094 26.973502 8.606445 C 28.23986 11.480957 28.921744 16.182129 27.933707 19.226562 C 26.94567 22.270996 23.744986 25.471191 21.059195 26.901367 C 18.359488 28.345703 14.68566 28.628906 11.777213 27.864258 C 8.868766 27.099609 5.584586 24.635742 3.566764 22.299316 C 1.562858 19.962891 -0.246224 16.960938 -0.301889 13.874023 C -0.357553 10.787109 0.811393 6.128418 3.204947 3.806152 C 5.598502 1.483887 11.888541 0.379395 14.087272 -0.0737305 C 16.299918 -0.526855 16.480826 0.761719 16.439078 1.059082 M 18.902213 -0.201172 C 21.629752 0.308594 25.484488 3.62207 26.94567 6.397461 C 28.420768 9.172852 28.532096 13.52002 27.697135 16.422852 C 26.87609 19.325684 24.245963 22.101074 21.963736 23.814453 C 19.68151 25.513672 17.134879 26.349121 14.031608 26.660645 C 10.942252 26.958008 5.821158 27.524414 3.385856 25.655273 C 0.950553 23.800293 -0.580209 18.476074 -0.594125 15.488281 C -0.608041 12.500488 1.72985 10.022461 3.30236 7.728516 C 4.874869 5.43457 6.113395 2.970703 8.840934 1.724609 C 11.568473 0.478516 18.053336 0.237793 19.639762 0.237793 C 21.226188 0.223633 18.526481 1.512207 18.38732 1.696289 " transform="matrix(0.280702,0,0,0.275862,3.237084,2.758621)"/>
  <path  d="M -0.260884 -17.497731 C -0.664449 -21.207692 -3.405904 -34.730641 -2.779683 -39.941578 C -2.153463 -45.152516 0.114848 -46.894215 3.482524 -48.749196 C 6.8502 -50.590016 13.098491 -51.467946 17.440287 -51.028981 C 21.782084 -50.590016 27.042338 -51.694508 29.519389 -46.129567 C 31.99644 -40.564625 37.242778 -22.595387 32.27476 -17.639332 C 27.320659 -12.683278 5.124614 -16.50652 -0.246968 -16.393238 M -1.513326 -18.729664 C -1.555074 -22.708668 -1.193257 -36.727223 -0.469625 -41.499196 C 0.254008 -46.257008 -0.107808 -45.888844 2.814555 -47.290699 C 5.736918 -48.692555 12.305278 -50.09441 17.092387 -49.938649 C 21.86558 -49.768727 29.268901 -51.538746 31.523295 -46.313649 C 33.77769 -41.088551 35.753764 -23.430836 30.590922 -18.602223 C 25.441996 -13.77361 5.820414 -17.582692 0.601909 -17.356129 " transform="matrix(0.280702,0,0,0.275862,3.612293,25.350398)"/>
</svg>
`;
const agingIcon = (title, description) => `
<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24" aria-label="${title + description}">
  <title>${title}</title>
  <description>${description}</description>
  <g id="surface1">
  <path style="fill-rule:evenodd;fill-opacity:1;stroke-width:16;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;" d="M 254.333333 461.166667 C 125 283.833333 172.833333 22.333333 518.5 18.333333 C 864.666667 17.666667 924.666667 295.833333 792.833333 449.666667 C 801.333333 531.5 801.5 600.333333 738.5 618.333333 C 712.833333 726.333333 722.5 794.5 707.166667 829.666667 C 635.333333 956.666667 410.833333 962.5 340 831.166667 C 323.666667 790 337.5 722.5 305.666667 612.166667 C 261.833333 595.166667 248.833333 542.666667 254.333333 461.166667 Z M 254.333333 238.333333 C 236.666667 279 245.166667 305 261.666667 348.5 C 272 375.333333 259.5 429.166667 254.333333 461.166667 M 797.166667 238.333333 C 809.5 264 807.166667 289.833333 790.166667 342.333333 C 778.5 372.833333 790.166667 419.166667 792.833333 449.666667 M 394.5 693.833333 C 384 658.666667 342 623.5 305.666667 612.166667 M 655.333333 692 C 672 650 694.5 620 738.5 618.333333 " transform="matrix(0.0234375,0,0,0.0234375,0,0)"/>
  <path style="fill:none;stroke-width:8;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;" d="M 340 626 C 361 674 372.333333 725.833333 380 779 C 428.166667 840 594.166667 858 665 776 C 669.833333 725.166667 687.666667 675.666667 704 626 L 655.333333 692 C 649.666667 733.166667 402 730.5 394.5 693.833333 Z M 403.5 798 L 403.5 706 M 432 815 L 433 714 M 462.5 822 L 463 719 M 492.5 827.5 C 492.5 825.5 493 721.5 493 721.5 M 523.5 831 L 523 722.5 M 554.5 827 L 554 722 M 583 822.5 L 582 719 M 615.5 810.5 L 614 715 M 644 794 L 643 705.5 M 642 750.5 C 560.5 786 487.833333 788.5 404 750.5 " transform="matrix(0.0234375,0,0,0.0234375,0,0)"/>
  <path style=" stroke:none;fill-rule:evenodd;fill:rgb(0%,0%,0%);fill-opacity:1;" d="M 7.25 9.789062 C 7.113281 10.28125 7.207031 10.910156 7.382812 11.460938 C 7.605469 12.152344 8.105469 12.566406 8.953125 12.632812 C 9.929688 12.65625 10.554688 12.089844 10.96875 11.179688 C 11.082031 10.90625 11.15625 10.445312 11.039062 9.9375 C 10.96875 9.679688 10.644531 9.296875 10.328125 9.101562 C 9.753906 8.753906 7.472656 8.949219 7.25 9.789062 Z M 17.339844 9.726562 C 17.472656 10.21875 17.378906 10.847656 17.203125 11.398438 C 16.984375 12.089844 16.480469 12.503906 15.632812 12.570312 C 14.65625 12.59375 14.035156 12.027344 13.617188 11.117188 C 13.503906 10.84375 13.429688 10.382812 13.546875 9.875 C 13.617188 9.617188 13.941406 9.234375 14.257812 9.035156 C 14.835938 8.691406 17.113281 8.886719 17.339844 9.726562 Z M 12.035156 12 L 12.035156 14.765625 C 11.625 15.386719 11.484375 15.433594 11.25 15.421875 C 10.941406 15.421875 10.734375 14.964844 10.792969 14.4375 C 10.945312 12.769531 11.449219 12.425781 12.035156 12 Z M 12.453125 12.011719 L 12.453125 14.777344 C 12.863281 15.398438 13.003906 15.445312 13.238281 15.433594 C 13.542969 15.433594 13.75 14.976562 13.695312 14.449219 C 13.542969 12.78125 13.039062 12.4375 12.453125 12.011719 Z M 12.453125 12.011719 "/>
  </g>
</svg>
`;

var TodoItemViewPane;
(function (TodoItemViewPane) {
    TodoItemViewPane[TodoItemViewPane["Aging"] = 0] = "Aging";
    TodoItemViewPane[TodoItemViewPane["Today"] = 1] = "Today";
    TodoItemViewPane[TodoItemViewPane["Scheduled"] = 2] = "Scheduled";
    TodoItemViewPane[TodoItemViewPane["Inbox"] = 3] = "Inbox";
    TodoItemViewPane[TodoItemViewPane["Someday"] = 4] = "Someday";
    TodoItemViewPane[TodoItemViewPane["Stakeholder"] = 5] = "Stakeholder";
})(TodoItemViewPane || (TodoItemViewPane = {}));
class TodoItemView extends obsidian.ItemView {
    constructor(leaf, props) {
        //debugger;
        super(leaf);
        this.props = props;
        this.state = {
            activePane: TodoItemViewPane.Today,
        };
        this.filter = '';
    }
    getViewType() {
        return VIEW_TYPE_TODO;
    }
    getDisplayText() {
        return 'Todo';
    }
    getIcon() {
        return 'checkmark';
    }
    onClose() {
        return Promise.resolve();
    }
    setProps(setter) {
        this.props = setter(this.props);
        this.render();
    }
    setViewState(newState) {
        this.state = newState;
        this.render();
    }
    setFilter(filter) {
        this.filter = filter;
        this.filterRegexp = new RegExp(filter, 'i');
        this.render();
    }
    render() {
        const container = this.containerEl.children[1];
        container.empty();
        container.createDiv('todo-item-view-container', el => {
            el.createDiv('todo-item-view-search', el => {
                this.renderSearch(el);
            });
            el.createDiv('todo-item-view-toolbar', el => {
                this.renderToolBar(el);
            });
            el.createDiv('todo-item-view-items', el => {
                this.renderItems(el);
            });
        });
    }
    renderSearch(container) {
        container.createEl('table', {}, el => {
            el.addClass('todo-filter-wrapper');
            el.createEl('tr', {}, el => {
                el.addClass('todo-filter-row');
                el.createEl('td', {}, el => {
                    el.addClass('todo-filter-col-input');
                    el.createEl('input', { value: this.filter }, el => {
                        el.addClass('todo-filter-input');
                        el.setAttribute('placeholder', 'proj/person RexExp filter, case insensitive');
                        el.onchange = e => {
                            this.setFilter(e.target.value);
                        };
                    });
                });
                el.createEl('td', {}, el => {
                    el.addClass('todo-filter-col-button');
                    el.createEl('button', { text: 'Filter' }, el => {
                        el.addClass('todo-filter-button');
                    });
                });
            });
        });
    }
    renderToolBar(container) {
        const activeClass = (pane) => {
            return pane === this.state.activePane ? ' active' : '';
        };
        const setActivePane = (pane) => {
            const newState = Object.assign(Object.assign({}, this.state), { activePane: pane });
            this.setViewState(newState);
        };
        container.createDiv(`todo-item-view-toolbar-item${activeClass(TodoItemViewPane.Inbox)}`, el => {
            el.appendChild(RenderIcon(Icon.Inbox, 'Inbox: No date set, no stakeholder action set, not a someday / maybe item.'));
            el.onClickEvent(() => setActivePane(TodoItemViewPane.Inbox));
        });
        container.createDiv(`todo-item-view-toolbar-item${activeClass(TodoItemViewPane.Aging)}`, el => {
            el.appendChild(RenderIcon(Icon.Aging, 'Aging'));
            el.onClickEvent(() => setActivePane(TodoItemViewPane.Aging));
        });
        container.createDiv(`todo-item-view-toolbar-item${activeClass(TodoItemViewPane.Today)}`, el => {
            el.appendChild(RenderIcon(Icon.Today, 'Scheduled for Today'));
            el.onClickEvent(() => setActivePane(TodoItemViewPane.Today));
        });
        container.createDiv(`todo-item-view-toolbar-item${activeClass(TodoItemViewPane.Scheduled)}`, el => {
            el.appendChild(RenderIcon(Icon.Scheduled, 'Scheduled for a future date'));
            el.onClickEvent(() => setActivePane(TodoItemViewPane.Scheduled));
        });
        container.createDiv(`todo-item-view-toolbar-item${activeClass(TodoItemViewPane.Stakeholder)}`, el => {
            el.appendChild(RenderIcon(Icon.Stakeholder, 'Stakeholder actions: discussWith, promisedTo, waitingFor. Only items that have a valid project or person will show up here. Stakeholder actions without project or person are in the Inbox.'));
            el.onClickEvent(() => setActivePane(TodoItemViewPane.Stakeholder));
        });
        container.createDiv(`todo-item-view-toolbar-item${activeClass(TodoItemViewPane.Someday)}`, el => {
            el.appendChild(RenderIcon(Icon.Someday, 'Tagged as Someday / Maybe'));
            el.onClickEvent(() => setActivePane(TodoItemViewPane.Someday));
        });
    }
    renderItems(container) {
        const todosToRender = this.props.todos
            .filter(this.filterForState, this)
            .sort(this.sortByActionDate);
        todosToRender.forEach((todo, index) => {
            if (index > 0) {
                if ((todo.isWaitingForNote &&
                    todosToRender[index - 1].isDiscussWithNote) ||
                    (todo.isPromisedToNote &&
                        (todosToRender[index - 1].isWaitingForNote ||
                            todosToRender[index - 1].isDiscussWithNote)) ||
                    (!todo.isPromisedToNote &&
                        !todo.isWaitingForNote &&
                        !todo.isDiscussWithNote &&
                        (todosToRender[index - 1].isWaitingForNote ||
                            todosToRender[index - 1].isDiscussWithNote ||
                            todosToRender[index - 1].isPromisedToNote))) {
                    container.createEl('hr', {}, el => {
                        el.addClass('todo-item-view-divider');
                    });
                }
            }
            container.createDiv('todo-item-view-item', el => {
                el.createDiv('todo-item-view-item-checkbox', el => {
                    el.createEl('input', { type: 'checkbox' }, el => {
                        el.checked = todo.status === TodoItemStatus.Done;
                        el.onClickEvent(() => {
                            this.toggleTodo(todo);
                        });
                    });
                });
                el.createDiv('todo-item-view-item-description', el => {
                    obsidian.MarkdownRenderer.renderMarkdown(todo.description, el, todo.sourceFilePath, this);
                });
                el.createDiv('todo-item-view-item-link', el => {
                    el.appendChild(RenderIcon(Icon.Reveal, 'Open file'));
                    el.onClickEvent(() => {
                        this.openFile(todo);
                    });
                });
            });
        });
    }
    filterForState(value) {
        const isPersonMatch = value.person.match(this.filterRegexp) != null;
        const isProjectMatch = value.project.match(this.filterRegexp) != null;
        const isFilterSet = this.filter != '';
        const hasPersonOrProject = value.person != '' || value.project != '';
        const isPeopleActionNote = value.isDiscussWithNote ||
            value.isWaitingForNote ||
            value.isPromisedToNote;
        if (!isFilterSet || isPersonMatch || isProjectMatch) {
            const isToday = (date) => {
                const today = new Date();
                return (date.getDate() == today.getDate() &&
                    date.getMonth() == today.getMonth() &&
                    date.getFullYear() == today.getFullYear());
            };
            const isBeforeToday = (date) => {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                return date < today;
            };
            const isAgingNote = value.actionDate && isBeforeToday(value.actionDate);
            const isTodayNote = value.actionDate && isToday(value.actionDate);
            const isScheduledNote = !value.isSomedayMaybeNote &&
                value.actionDate &&
                !isTodayNote &&
                !isAgingNote;
            switch (this.state.activePane) {
                case TodoItemViewPane.Inbox:
                    return (!value.isSomedayMaybeNote &&
                        !isTodayNote &&
                        !isScheduledNote &&
                        !isAgingNote &&
                        !(isPeopleActionNote && hasPersonOrProject));
                case TodoItemViewPane.Scheduled:
                    return isScheduledNote;
                case TodoItemViewPane.Someday:
                    return value.isSomedayMaybeNote;
                case TodoItemViewPane.Today:
                    return isTodayNote;
                case TodoItemViewPane.Aging:
                    return isAgingNote;
                case TodoItemViewPane.Stakeholder:
                    return hasPersonOrProject && isPeopleActionNote;
            }
        }
        else
            return false;
    }
    sortByActionDate(a, b) {
        if (!a.actionDate && !b.actionDate) {
            if (a.isDiscussWithNote && !b.isDiscussWithNote) {
                return -1;
            }
            if (a.isWaitingForNote && !b.isDiscussWithNote && !b.isWaitingForNote) {
                return -1;
            }
            if (a.isPromisedToNote && !b.isDiscussWithNote && !b.isWaitingForNote) {
                return -1;
            }
            if (b.isDiscussWithNote && !a.isDiscussWithNote) {
                return 1;
            }
            if (b.isWaitingForNote && !a.isDiscussWithNote && !a.isWaitingForNote) {
                return 1;
            }
            if (b.isPromisedToNote && !a.isDiscussWithNote && !a.isWaitingForNote) {
                return 1;
            }
            if (a.isSomedayMaybeNote && !b.isSomedayMaybeNote) {
                return -1;
            }
            if (!a.isSomedayMaybeNote && b.isSomedayMaybeNote) {
                return 1;
            }
            return 0;
        }
        return a.actionDate < b.actionDate
            ? -1
            : a.actionDate > b.actionDate
                ? 1
                : 0;
    }
    toggleTodo(todo) {
        this.props.toggleTodo(todo, TodoItemStatus.toggleStatus(todo.status));
    }
    openFile(todo) {
        this.props.openFile(todo.sourceFilePath);
    }
}

class ActionTrackerPlugin extends obsidian.Plugin {
    constructor(app, manifest) {
        super(app, manifest);
    }
    getTodoItemIndexProps() {
        return {
            personRegexp: new RegExp(this.getSettingValue('personRegexpString')),
            projectRegexp: new RegExp(this.getSettingValue('projectRegexpString')),
            dateRegexp: new RegExp(this.getSettingValue('dateRegexpString')),
            discussWithRegexp: new RegExp(this.getSettingValue('discussWithRegexpString')),
            waitingForRegexp: new RegExp(this.getSettingValue('waitingForRegexpString')),
            promisedToRegexp: new RegExp(this.getSettingValue('promisedToRegexpString')),
            somedayMaybeRegexp: new RegExp(this.getSettingValue('somedayMaybeRegexpString')),
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin');
            yield this.loadSettings();
            this.todoIndex = new TodoIndex(this.app.vault, this.tick.bind(this), this.getTodoItemIndexProps());
            this.registerView(VIEW_TYPE_TODO, (leaf) => {
                const todos = [];
                const props = {
                    todos: todos,
                    openFile: (filePath) => {
                        const file = this.app.vault.getAbstractFileByPath(filePath);
                        this.app.workspace.splitActiveLeaf().openFile(file);
                    },
                    toggleTodo: (todo, newStatus) => {
                        this.todoIndex.setStatus(todo, newStatus);
                    },
                };
                this.view = new TodoItemView(leaf, props);
                return this.view;
            });
            this.addSettingTab(new ActionTrackerSettingTab(this.app, this));
            if (this.app.workspace.layoutReady) {
                this.initLeaf();
                yield this.prepareIndex();
            }
            else {
                this.registerEvent(this.app.workspace.on('layout-ready', this.initLeaf.bind(this)));
                this.registerEvent(this.app.workspace.on('layout-ready', () => __awaiter(this, void 0, void 0, function* () { return yield this.prepareIndex(); })));
            }
        });
    }
    onunload() {
        this.app.workspace
            .getLeavesOfType(VIEW_TYPE_TODO)
            .forEach(leaf => leaf.detach());
    }
    initLeaf() {
        if (this.app.workspace.getLeavesOfType(VIEW_TYPE_TODO).length) {
            return;
        }
        this.app.workspace.getRightLeaf(false).setViewState({
            type: VIEW_TYPE_TODO,
        });
    }
    prepareIndex() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.todoIndex.initialize();
        });
    }
    tick(todos) {
        this.view.setProps((currentProps) => {
            return Object.assign(Object.assign({}, currentProps), { todos: todos });
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
            yield this.todoIndex.reloadIndex(this.getTodoItemIndexProps());
        });
    }
    getSettingValue(setting) {
        return this.settings[setting];
    }
}

module.exports = ActionTrackerPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
